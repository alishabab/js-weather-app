!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);n(1);var r={kelvinToC:e=>(Number(e)-273.15).toFixed(2),kelvinToF:e=>(1.8*Number(e)-459.67).toFixed(2)};const o=e=>{e.innerHTML=""},i=(e,t,n)=>{o(e);const i=["Current Temp","Feels Like","Min Temp","Max Temp"];"To Farenhite"===t.textContent?(t.textContent="To Celsius",i.forEach((t,o)=>{const i=document.createElement("li"),a=r.kelvinToF(n[o]);i.textContent=`${t} : ${a}`,e.appendChild(i)})):(t.textContent="To Farenhite",i.forEach((t,o)=>{const i=document.createElement("li"),a=r.kelvinToC(n[o]);i.textContent=`${t} : ${a}`,e.appendChild(i)}))};var a=e=>{const t=document.querySelector("#weatherDiv");t.classList.add("animate"),o(t);const n=document.createElement("div"),r=document.createElement("h1"),a=document.createElement("h2"),c=document.createElement("img"),u=document.createElement("ul"),s=document.createElement("button");s.setAttribute("class","btn"),s.textContent="To Celsius";const l=Object.values(e.main);i(u,s,l),s.addEventListener("click",()=>i(u,s,l)),n.setAttribute("class","icon"),c.src=`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`,r.textContent=`${e.name}, ${e.sys.country}`,a.textContent=e.weather[0].description,n.appendChild(r),n.appendChild(c),t.appendChild(n),t.appendChild(a),t.appendChild(u),t.appendChild(s),t.addEventListener("animationend",()=>{t.classList.remove("animate")})};const c=document.querySelector("#getBtn"),u=document.querySelector("#weatherDiv");c.addEventListener("click",async e=>{e.preventDefault();const t=document.querySelector("#city").value;try{const e=await(async e=>{const t=await fetch(e);if(t.ok)return t.json();throw new Error("City Not Found!")})(`https://api.openweathermap.org/data/2.5/weather?q=${t}&appid=a6fffd615dee8a18a1d160f3eead85a3`);a(e)}catch(e){(e=>{u.textContent=e})(e)}})},function(e,t,n){var r=n(2),o=n(3);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function c(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],u=t.base?i[0]+t.base:i[0],s=n[u]||0,l="".concat(u," ").concat(s);n[u]=s+1;var d=c(l),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(a[d].references++,a[d].updater(f)):a.push({identifier:l,updater:v(f,t),references:1}),r.push(l)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,d=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,h=0;function v(e,t){var n,r,o;if(t.singleton){var i=h++;n=m||(m=s(t)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=s(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=c(n[r]);a[o].references--}for(var i=u(e,t),s=0;s<n.length;s++){var l=c(n[s]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=i}}}},function(e,t,n){(t=n(4)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css2?family=Sriracha&display=swap);"]),t.push([e.i,'*{margin:0;padding:0;box-sizing:border-box;list-style:none}body{font-family:"Sriracha",cursive;background-image:url("https://img.itch.zone/aW1nLzk4Nzg5Ni5naWY=/original/V5VZ3o.gif");background-repeat:no-repeat;background-size:100vw 100vh}.logo{text-decoration:none;font-size:48px}.input,.btn{padding:.3rem;border-radius:5px;font-family:"Sriracha",cursive}.input:focus{background-color:skyblue}.btn:hover{cursor:pointer;background-color:skyblue}.content{margin:1.5rem auto;width:90vw;background-color:rgba(43,41,41,.3);display:flex;flex-direction:column;align-items:center}.content-container{text-align:center}.icon{display:flex;align-items:center}.animate{animation:myframe 2s ease-in-out 0s 1}@keyframes myframe{0%{width:20vw}100%{width:90vw}}@media(min-width: 720px){.content{flex-direction:row;justify-content:space-around;align-items:center}}',""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(u," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,c,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,